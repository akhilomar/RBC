{"version":3,"sources":["App.js","Button.js","Screen.js","serviceWorker.js","index.js"],"names":["App","props","switchOp","operator","Dop","num1","num2","result","state","replace","isNaN","eval","setState","handleClick","button","current","num","parseFloat","join","test","push","clearState","pop","bind","this","className","map","item","i","key","name","Component","Button","sendToParent","onClick","Screen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k7DASMA,I,qBACJ,aAAYC,OAAQ,IAAD,kJACjB,2RAAMA,QADW,MAoBnBC,SAAW,SAACC,GACV,OAAQA,GACN,IAAK,OACH,MAAO,IACT,IAAK,IACH,MAAO,MAzBM,MA4BnBC,IAAM,SAACC,KAAMF,SAAUG,MACrB,IAAIC,OAAS,MAAKC,MAAMD,OACxBJ,SAAWA,SAASM,QAAQ,UAAQ,MAAKP,UACpCQ,MAAMJ,QACTC,OAASI,KAAKN,KAAOF,SAAWG,OAElC,MAAKM,SAAS,CAAEL,iBAlCC,MAoCnBM,YAAc,SAACC,GACb,IAAIC,EAAO,8HAAO,MAAKP,MAAMO,SACvBR,EAAS,MAAKC,MAAMD,OACtBJ,EAAW,MAAKK,MAAML,SACpBa,EAAMC,WAAWF,EAAQG,KAAK,KACpC,QAAQ,GACN,IAAK,eAAYC,KAAKL,GACpB,MAAKV,IAAIG,EAAQJ,EAAUa,GACjB,KAARF,EAEFC,EADAZ,EAAWW,EAGI,KAARA,IAENC,EAAQ,IAIT,MACF,IAAK,UAAUI,KAAKL,GACd,cAAWK,KAAKJ,KAClBA,EAAU,IAEZA,EAAQK,KAAKN,GACb,MAEF,IAAK,KAAKK,KAAKL,GACb,MAAKO,aACL,MACF,IAAK,MAAMF,KAAKL,GACdC,EAAQO,MAIZ,MAAKV,SAAS,CAAEG,UAASZ,cApEzB,MAAKK,MAAQ,CACXO,QAAS,GACTR,OAAQ,EACRJ,SAAU,KAEZ,MAAKkB,WAAW,MAAKA,WAAWE,KAAhB,0IAPC,M,4SAaNC,KAAKhB,MAAMD,OAEtB,IAAIQ,EAAQS,KAAKhB,MAAMO,QACvBA,EAAQ,GACRS,KAAKZ,SAAS,CAACL,OAHR,IAIPiB,KAAKZ,SAAS,CAACG,c,+BAsDP,IAAD,OAEP,OACE,sEACE,4FACA,kEAAKU,UAAU,cACb,mEAAMA,UAAU,UACd,2DAAC,wCAAD,CAAQV,QAASS,KAAKhB,MAAMO,QAASR,OAAQiB,KAAKhB,MAAMD,OAAQkB,UAAU,YAE5E,kEAAKA,UAAU,iBARL,CAAC,KAAM,MAAO,IAAK,OAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAS7FC,IAAI,SAACC,EAAMC,GAAP,OAAa,2DAAC,wCAAD,CAAQf,YAAa,EAAKA,YAAagB,IAAKD,EAAGE,KAAMH,a,KAnFzEI,8CA8FH/B,2B,oFCpGTgC,G,gNACJC,aAAa,WACX,EAAKhC,MAAMY,YAAY,EAAKZ,MAAM6B,O,wEAGlC,OACA,4BAAQI,QAASV,KAAKS,aAAcR,UAAU,UAAUD,KAAKvB,MAAM6B,U,GANlDC,cAcNC,O,oFCbTG,G,sLAEF,OACE,yBAAKV,UAAU,UACb,2BAAID,KAAKvB,MAAMc,SACf,2BAAIS,KAAKvB,MAAMM,a,GALFwB,cAcNI,O,mKCNKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC1C,EAAA,EAAD,MAAS2C,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20096e92.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport './Button.css';\nimport './Screen.css';\nimport Button from './Button';\nimport Screen from './Screen';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: [],\n      result: 0,\n      operator: '+'\n    }\n    this.clearState=this.clearState.bind(this);\n    \n\n  }\n\n  clearState(){\n    let result=this.state.result;\n    result=0\n    let current=this.state.current;\n    current=[]\n    this.setState({result})\n    this.setState({current})\n  }\n  switchOp = (operator) => {\n    switch (operator) {\n      case '÷':\n        return '/'\n      case 'x':\n        return '*'\n    }\n  }\n  Dop = (num1, operator, num2) => {\n    let result = this.state.result\n    operator = operator.replace(/[x÷]/, this.switchOp)\n    if (!isNaN(num2)) {\n      result = eval(num1 + operator + num2)\n    }\n    this.setState({ result })\n  }\n  handleClick = (button) => {\n    let current = [...this.state.current]\n    const result = this.state.result\n    let operator = this.state.operator\n    const num = parseFloat(current.join(''))\n    switch (true) {\n      case /[%+x\\-÷=]/.test(button):\n        this.Dop(result, operator, num);\n       if(button!=\"=\"){\n        operator = button\n        current = operator\n       }\n       else if(button==\"=\")\n       {\n         current=[]\n        \n       }\n       \n        break\n      case /[0-9\\.]/.test(button):\n        if (/[%+x\\-÷]/.test(current)) {\n          current = []\n        }\n        current.push(button)\n        break           \n\n      case /AC/.test(button):\n        this.clearState();\n        break\n      case /DEL/.test(button):\n        current.pop();\n        break\n    }\n\n    this.setState({ current, operator })\n  }\n  render() {\n    const buttons = ['AC', 'DEL', '%', '÷', '9', '8', '7', 'x', '6', '5', '4', '-', '3', '2', '1', '+', '0', '.', '=']\n    return (\n      <div>\n        <h1>C A L C U L A T O R</h1>\n        <div className=\"calculator\" >\n          <span className=\"screen\">\n            <Screen current={this.state.current} result={this.state.result} className=\"screen\" />\n          </span>\n          <div className=\"btn-container\">\n            {buttons.map((item, i) => <Button handleClick={this.handleClick} key={i} name={item} />)}\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}\n\n\n\nexport default App;\n","import React, {Component} from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component{\r\n  sendToParent=()=>{\r\n    this.props.handleClick(this.props.name)\r\n  }\r\n  render(){\r\n    return(\r\n    <button onClick={this.sendToParent} className=\"button\">{this.props.name}</button>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Button;\r\n","import React, {Component} from 'react';\r\nimport './Screen.css';\r\n\r\n\r\nclass Screen extends Component{\r\n  render(){\r\n    return(\r\n      <div className=\"screen\">\r\n        <p>{this.props.current}</p>\r\n        <p>{this.props.result}</p>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Screen;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}